// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.1
// source: pkg/grpc/estate.proto

package estate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EstateServiceClient is the client API for EstateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EstateServiceClient interface {
	GetEstateList(ctx context.Context, in *GetListParameters, opts ...grpc.CallOption) (*EstateMainInfo, error)
	GetEstateInfo(ctx context.Context, in *GetEstateInfoParameter, opts ...grpc.CallOption) (*Estate, error)
	CreateEstate(ctx context.Context, in *Estate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// rpc EditEstate() returns ();
	DeleteEstate(ctx context.Context, in *DeleteEstateParameter, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type estateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEstateServiceClient(cc grpc.ClientConnInterface) EstateServiceClient {
	return &estateServiceClient{cc}
}

func (c *estateServiceClient) GetEstateList(ctx context.Context, in *GetListParameters, opts ...grpc.CallOption) (*EstateMainInfo, error) {
	out := new(EstateMainInfo)
	err := c.cc.Invoke(ctx, "/estate.EstateService/GetEstateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estateServiceClient) GetEstateInfo(ctx context.Context, in *GetEstateInfoParameter, opts ...grpc.CallOption) (*Estate, error) {
	out := new(Estate)
	err := c.cc.Invoke(ctx, "/estate.EstateService/GetEstateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estateServiceClient) CreateEstate(ctx context.Context, in *Estate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/estate.EstateService/CreateEstate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estateServiceClient) DeleteEstate(ctx context.Context, in *DeleteEstateParameter, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/estate.EstateService/DeleteEstate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EstateServiceServer is the server API for EstateService service.
// All implementations must embed UnimplementedEstateServiceServer
// for forward compatibility
type EstateServiceServer interface {
	GetEstateList(context.Context, *GetListParameters) (*EstateMainInfo, error)
	GetEstateInfo(context.Context, *GetEstateInfoParameter) (*Estate, error)
	CreateEstate(context.Context, *Estate) (*emptypb.Empty, error)
	// rpc EditEstate() returns ();
	DeleteEstate(context.Context, *DeleteEstateParameter) (*emptypb.Empty, error)
	mustEmbedUnimplementedEstateServiceServer()
}

// UnimplementedEstateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEstateServiceServer struct {
}

func (UnimplementedEstateServiceServer) GetEstateList(context.Context, *GetListParameters) (*EstateMainInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstateList not implemented")
}
func (UnimplementedEstateServiceServer) GetEstateInfo(context.Context, *GetEstateInfoParameter) (*Estate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstateInfo not implemented")
}
func (UnimplementedEstateServiceServer) CreateEstate(context.Context, *Estate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEstate not implemented")
}
func (UnimplementedEstateServiceServer) DeleteEstate(context.Context, *DeleteEstateParameter) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEstate not implemented")
}
func (UnimplementedEstateServiceServer) mustEmbedUnimplementedEstateServiceServer() {}

// UnsafeEstateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EstateServiceServer will
// result in compilation errors.
type UnsafeEstateServiceServer interface {
	mustEmbedUnimplementedEstateServiceServer()
}

func RegisterEstateServiceServer(s grpc.ServiceRegistrar, srv EstateServiceServer) {
	s.RegisterService(&EstateService_ServiceDesc, srv)
}

func _EstateService_GetEstateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstateServiceServer).GetEstateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/estate.EstateService/GetEstateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstateServiceServer).GetEstateList(ctx, req.(*GetListParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstateService_GetEstateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEstateInfoParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstateServiceServer).GetEstateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/estate.EstateService/GetEstateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstateServiceServer).GetEstateInfo(ctx, req.(*GetEstateInfoParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstateService_CreateEstate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Estate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstateServiceServer).CreateEstate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/estate.EstateService/CreateEstate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstateServiceServer).CreateEstate(ctx, req.(*Estate))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstateService_DeleteEstate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEstateParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstateServiceServer).DeleteEstate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/estate.EstateService/DeleteEstate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstateServiceServer).DeleteEstate(ctx, req.(*DeleteEstateParameter))
	}
	return interceptor(ctx, in, info, handler)
}

// EstateService_ServiceDesc is the grpc.ServiceDesc for EstateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EstateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "estate.EstateService",
	HandlerType: (*EstateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEstateList",
			Handler:    _EstateService_GetEstateList_Handler,
		},
		{
			MethodName: "GetEstateInfo",
			Handler:    _EstateService_GetEstateInfo_Handler,
		},
		{
			MethodName: "CreateEstate",
			Handler:    _EstateService_CreateEstate_Handler,
		},
		{
			MethodName: "DeleteEstate",
			Handler:    _EstateService_DeleteEstate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/estate.proto",
}
