// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\clients\clients.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/alserov/restate/gateway/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockEstateClient is a mock of EstateClient interface.
type MockEstateClient struct {
	ctrl     *gomock.Controller
	recorder *MockEstateClientMockRecorder
}

// MockEstateClientMockRecorder is the mock recorder for MockEstateClient.
type MockEstateClientMockRecorder struct {
	mock *MockEstateClient
}

// NewMockEstateClient creates a new mock instance.
func NewMockEstateClient(ctrl *gomock.Controller) *MockEstateClient {
	mock := &MockEstateClient{ctrl: ctrl}
	mock.recorder = &MockEstateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEstateClient) EXPECT() *MockEstateClientMockRecorder {
	return m.recorder
}

// CreateEstate mocks base method.
func (m *MockEstateClient) CreateEstate(ctx context.Context, est models.Estate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEstate", ctx, est)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEstate indicates an expected call of CreateEstate.
func (mr *MockEstateClientMockRecorder) CreateEstate(ctx, est interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEstate", reflect.TypeOf((*MockEstateClient)(nil).CreateEstate), ctx, est)
}

// DeleteEstate mocks base method.
func (m *MockEstateClient) DeleteEstate(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEstate", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEstate indicates an expected call of DeleteEstate.
func (mr *MockEstateClientMockRecorder) DeleteEstate(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEstate", reflect.TypeOf((*MockEstateClient)(nil).DeleteEstate), ctx, id)
}

// GetInfo mocks base method.
func (m *MockEstateClient) GetInfo(ctx context.Context, estateID string) (models.Estate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", ctx, estateID)
	ret0, _ := ret[0].(models.Estate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockEstateClientMockRecorder) GetInfo(ctx, estateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockEstateClient)(nil).GetInfo), ctx, estateID)
}

// GetList mocks base method.
func (m *MockEstateClient) GetList(ctx context.Context, param models.GetEstateListParameter) (models.EstateList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, param)
	ret0, _ := ret[0].(models.EstateList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockEstateClientMockRecorder) GetList(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockEstateClient)(nil).GetList), ctx, param)
}

// MockMeetingsClient is a mock of MeetingsClient interface.
type MockMeetingsClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeetingsClientMockRecorder
}

// MockMeetingsClientMockRecorder is the mock recorder for MockMeetingsClient.
type MockMeetingsClientMockRecorder struct {
	mock *MockMeetingsClient
}

// NewMockMeetingsClient creates a new mock instance.
func NewMockMeetingsClient(ctrl *gomock.Controller) *MockMeetingsClient {
	mock := &MockMeetingsClient{ctrl: ctrl}
	mock.recorder = &MockMeetingsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeetingsClient) EXPECT() *MockMeetingsClientMockRecorder {
	return m.recorder
}

// ArrangeMeeting mocks base method.
func (m *MockMeetingsClient) ArrangeMeeting() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ArrangeMeeting")
}

// ArrangeMeeting indicates an expected call of ArrangeMeeting.
func (mr *MockMeetingsClientMockRecorder) ArrangeMeeting() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArrangeMeeting", reflect.TypeOf((*MockMeetingsClient)(nil).ArrangeMeeting))
}

// CancelMeeting mocks base method.
func (m *MockMeetingsClient) CancelMeeting() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CancelMeeting")
}

// CancelMeeting indicates an expected call of CancelMeeting.
func (mr *MockMeetingsClientMockRecorder) CancelMeeting() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMeeting", reflect.TypeOf((*MockMeetingsClient)(nil).CancelMeeting))
}

// GetAvailableTime mocks base method.
func (m *MockMeetingsClient) GetAvailableTime() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAvailableTime")
}

// GetAvailableTime indicates an expected call of GetAvailableTime.
func (mr *MockMeetingsClientMockRecorder) GetAvailableTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableTime", reflect.TypeOf((*MockMeetingsClient)(nil).GetAvailableTime))
}

// GetMeetings mocks base method.
func (m *MockMeetingsClient) GetMeetings() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetMeetings")
}

// GetMeetings indicates an expected call of GetMeetings.
func (mr *MockMeetingsClientMockRecorder) GetMeetings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeetings", reflect.TypeOf((*MockMeetingsClient)(nil).GetMeetings))
}
